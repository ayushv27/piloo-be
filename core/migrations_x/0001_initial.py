# Generated by Django 5.0.2 on 2025-07-18 03:52

import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlertTypeMaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('report_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Bi-Weekly'), ('monthly', 'Monthly')], default='daily', max_length=20)),
                ('subscription_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('trial', 'Trial'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('subscription_ends_at', models.DateField(blank=True, null=True)),
                ('additional_recordings_storage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(365)])),
                ('additional_cameras', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('recording_quality', models.CharField(max_length=10)),
                ('retention_days', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(0)])),
                ('email_notifications', models.BooleanField(default=False)),
                ('wa_notifications', models.BooleanField(default=False)),
                ('timezone', models.CharField(default='Asia/Kolkata', max_length=50)),
                ('language', models.CharField(default='en', max_length=10)),
                ('last_report_sent', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='DailyAlertsCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OnboardingStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_number', models.IntegerField(unique=True)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('target_page', models.CharField(max_length=100)),
                ('target_element', models.CharField(blank=True, max_length=100, null=True)),
                ('instructions', models.TextField()),
                ('points', models.IntegerField(default=10)),
                ('category', models.CharField(choices=[('getting_started', 'Getting Started'), ('monitoring', 'Monitoring'), ('security', 'Security'), ('ai_features', 'AI Features'), ('management', 'Management')], max_length=20)),
                ('estimated_time', models.IntegerField(default=5, help_text='Estimated time in minutes')),
                ('is_required', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'piloo_onboarding_steps',
                'ordering': ['step_number'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('cameras', models.IntegerField()),
                ('features', models.JSONField(default=list)),
                ('storage_gb', models.IntegerField(default=100)),
                ('subscription_days', models.IntegerField(default=30)),
                ('retention_days', models.IntegerField(default=30)),
                ('ai_features', models.BooleanField(default=False)),
                ('cloud_backup', models.BooleanField(default=False)),
                ('priority_support', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('stripe_price_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'piloo_subscription_plans',
                'ordering': ['price'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(max_length=50)),
                ('points', models.IntegerField(default=10)),
                ('category', models.CharField(choices=[('onboarding', 'Onboarding'), ('monitoring', 'Monitoring'), ('security', 'Security'), ('ai_usage', 'AI Usage'), ('management', 'Management'), ('milestone', 'Milestone')], max_length=20)),
                ('condition', models.JSONField(help_text='Condition for earning this achievement')),
                ('is_active', models.BooleanField(default=True)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'piloo_achievements',
                'ordering': ['category', 'points'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=150, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('viewer', 'Viewer'), ('company_admin', 'Company Admin'), ('demo', 'Demo')], default='viewer', max_length=20)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='piloo_users', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='piloo_user_permissions', to='auth.permission', verbose_name='user permissions')),
                ('company', models.ForeignKey(blank=True, help_text='The client this user belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client_users', to='core.client', verbose_name='clients')),
            ],
            options={
                'db_table': 'piloo_users',
            },
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('rtsp_url', models.CharField(blank=True, help_text='Accepts http, https, rtsp, rtmp schemes', max_length=200, null=True, validators=[django.core.validators.URLValidator(schemes=['http', 'https', 'rtsp', 'rtmp'])])),
                ('last_check', models.DateTimeField(blank=True, null=True)),
                ('rtmp_url', models.CharField(blank=True, help_text='Accepts http, https, rtsp, rtmp schemes', max_length=200, null=True, validators=[django.core.validators.URLValidator(schemes=['http', 'https', 'rtsp', 'rtmp'])])),
                ('hls_url', models.CharField(blank=True, help_text='Accepts http, https, rtsp, rtmp schemes', max_length=200, null=True, validators=[django.core.validators.URLValidator(schemes=['http', 'https', 'rtsp', 'rtmp'])])),
                ('output_url', models.CharField(blank=True, help_text='Accepts http, https, rtsp, rtmp schemes', max_length=200, null=True, validators=[django.core.validators.URLValidator(schemes=['http', 'https', 'rtsp', 'rtmp'])])),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Maintenance'), ('offline', 'Offline'), ('error', 'Error')], max_length=20)),
                ('sensitivity', models.IntegerField(default=5, help_text='Motion detection sensitivity (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('recording_enabled', models.BooleanField(default=True)),
                ('retention_days', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(1)])),
                ('quality', models.CharField(choices=[('480p', '480p'), ('720p', '720p'), ('1080p', '1080p'), ('4K', '4K')], default='1080p', max_length=10)),
                ('has_audio', models.BooleanField(default=False)),
                ('pan_tilt_zoom', models.BooleanField(default=False)),
                ('night_vision', models.BooleanField(default=False)),
                ('outdoor_rated', models.BooleanField(default=False)),
                ('preset', models.CharField(choices=[('ultrafast', 'Ultrafast'), ('superfast', 'Superfast'), ('veryfast', 'Veryfast'), ('faster', 'Faster'), ('fast', 'Fast'), ('medium', 'Medium'), ('slow', 'Slow'), ('slower', 'Slower'), ('veryslow', 'Veryslow')], default='superfast', max_length=10)),
                ('framerate', models.IntegerField(choices=[(15, 15), (20, 20), (24, 24), (25, 25), (30, 30), (48, 48), (50, 50), (60, 60)], default=20)),
                ('video_bitrate', models.CharField(choices=[('500k', '500k'), ('1000k', '1000k'), ('2000k', '2000k'), ('4000k', '4000k'), ('8000k', '8000k')], default='500k', max_length=10)),
                ('audio_bitrate', models.CharField(choices=[('64k', '64k'), ('96k', '96k'), ('128k', '128k'), ('192k', '192k'), ('256k', '256k')], default='96k', max_length=10)),
                ('mac_address', models.CharField(blank=True, max_length=17, null=True)),
                ('firmware_version', models.CharField(blank=True, max_length=50, null=True)),
                ('last_maintenance', models.DateTimeField(blank=True, null=True)),
                ('uptime_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cameras', to='core.client')),
            ],
            options={
                'db_table': 'piloo_cameras',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ClientNotificationsTo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=16, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.client')),
            ],
        ),
        migrations.CreateModel(
            name='ClientSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alerts_intrusion', models.BooleanField(default=True)),
                ('alerts_motion', models.BooleanField(default=True)),
                ('alerts_unauthorized', models.BooleanField(default=True)),
                ('recording_enabled', models.BooleanField(default=True)),
                ('additional_recordings_storage', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('additional_cameras', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(500)])),
                ('recording_quality', models.CharField(max_length=10)),
                ('retention_days', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(1)])),
                ('email_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=False)),
                ('wa_notifications', models.BooleanField(default=False)),
                ('ai_detection_enabled', models.BooleanField(default=True)),
                ('face_recognition_enabled', models.BooleanField(default=False)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('language', models.CharField(default='en', max_length=10)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark')], default='light', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_settings', to='core.client')),
            ],
            options={
                'db_table': 'piloo_client_settings',
            },
        ),
        migrations.CreateModel(
            name='ClientUseCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severity', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=50, null=True)),
                ('notify_within', models.TimeField(blank=True, default='02:00:0', null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.client')),
                ('usecase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.alerttypemaster')),
            ],
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, max_length=150, null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed'), ('investigating', 'Under Investigation')], default='active', max_length=20)),
                ('chunk_url', models.URLField(blank=True, max_length=500, null=True)),
                ('frame_url', models.URLField(blank=True, max_length=500, null=True)),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('notification_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('camera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='camera_alerts', to='core.camera')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client_alerts', to='core.client')),
                ('usecase', models.ForeignKey(on_delete=django.db.models.expressions.Case, related_name='client_alerts', to='core.clientusecase')),
            ],
            options={
                'db_table': 'piloo_alerts',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DemoRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('company', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=20)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('contacted', 'Contacted'), ('scheduled', 'Scheduled'), ('completed', 'Completed'), ('declined', 'Declined')], default='pending', max_length=20)),
                ('demo_scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'piloo_demo_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='client',
            name='domain',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.domain'),
        ),
        migrations.AddField(
            model_name='alerttypemaster',
            name='domain',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='model_alerts', to='core.domain'),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('employee_id', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('department', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('on_break', 'On Break'), ('checked_out', 'Checked Out')], default='absent', max_length=20)),
                ('check_in', models.DateTimeField(blank=True, null=True)),
                ('check_out', models.DateTimeField(blank=True, null=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('total_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('face_encoding', models.JSONField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_seen_camera', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.camera')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='core.client')),
            ],
            options={
                'db_table': 'piloo_employees',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MenuPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dashboard', models.BooleanField(default=True)),
                ('ai_chat', models.BooleanField(default=True)),
                ('live_feed', models.BooleanField(default=True)),
                ('recordings', models.BooleanField(default=True)),
                ('alerts', models.BooleanField(default=True)),
                ('employees', models.BooleanField(default=False)),
                ('zones', models.BooleanField(default=True)),
                ('reports', models.BooleanField(default=True)),
                ('subscription', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='menu_permissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'piloo_menu_permissions',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('alert', 'Security Alert'), ('system', 'System Notification'), ('employee', 'Employee Update'), ('camera', 'Camera Status'), ('achievement', 'Achievement Earned'), ('subscription', 'Subscription Update'), ('email', 'Email'), ('whatsapp', 'WhatsApp')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('data', models.JSONField(blank=True, null=True)),
                ('is_sent', models.BooleanField(default=False)),
                ('is_read', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('action_url', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('next_cycle', models.DateTimeField(blank=True, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.client')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications_to_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'piloo_notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Recording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(blank=True, max_length=100, null=True)),
                ('file_path', models.CharField(blank=True, max_length=200, null=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('duration', models.DurationField()),
                ('file_size', models.BigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('quality', models.CharField(choices=[('480p', '480p'), ('720p', '720p'), ('1080p', '1080p'), ('4K', '4K')], default='480p', max_length=10)),
                ('has_motion', models.BooleanField(default=False)),
                ('has_audio', models.BooleanField(default=False)),
                ('thumbnail_path', models.CharField(blank=True, max_length=500, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('cloud_url', models.CharField(blank=True, max_length=200, null=True)),
                ('checksum', models.CharField(blank=True, max_length=64, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('camera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='core.camera')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='core.client')),
            ],
            options={
                'db_table': 'piloo_recordings',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField()),
                ('filters', models.JSONField(blank=True, null=True)),
                ('results_count', models.IntegerField(default=0)),
                ('execution_time', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('time_range_start', models.DateTimeField(blank=True, null=True)),
                ('time_range_end', models.DateTimeField(blank=True, null=True)),
                ('results_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cameras_searched', models.ManyToManyField(blank=True, to='core.camera')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_queries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'piloo_search_queries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payments',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('razorpay_order_id', models.CharField(max_length=100)),
                ('razorpay_payment_id', models.CharField(blank=True, max_length=100, null=True)),
                ('razorpay_signature', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='INR', max_length=10)),
                ('status', models.CharField(choices=[('created', 'Created'), ('success', 'Success'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='created', max_length=20)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='core.client')),
                ('subscription_plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.subscriptionplan')),
            ],
            options={
                'db_table': 'client_payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='client',
            name='subscription_plan',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='subscribed_plan', to='core.subscriptionplan'),
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alerts_intrusion', models.BooleanField(default=True)),
                ('alerts_motion', models.BooleanField(default=True)),
                ('alerts_unauthorized', models.BooleanField(default=True)),
                ('recording_enabled', models.BooleanField(default=True)),
                ('recording_quality', models.CharField(default='1080p', max_length=10)),
                ('retention_days', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(1)])),
                ('email_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=False)),
                ('ai_detection_enabled', models.BooleanField(default=True)),
                ('face_recognition_enabled', models.BooleanField(default=False)),
                ('cloud_backup_enabled', models.BooleanField(default=False)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('language', models.CharField(default='en', max_length=10)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark')], default='light', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='system_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'piloo_system_settings',
            },
        ),
        migrations.CreateModel(
            name='TempNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=16, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.client')),
            ],
        ),
        migrations.CreateModel(
            name='OnboardingProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_step', models.IntegerField(default=1)),
                ('completed_steps', models.JSONField(default=list)),
                ('total_points', models.IntegerField(default=0)),
                ('tutorial_completed', models.BooleanField(default=False)),
                ('last_active_step', models.CharField(blank=True, max_length=50, null=True)),
                ('onboarding_started', models.DateTimeField(blank=True, null=True)),
                ('onboarding_completed', models.DateTimeField(blank=True, null=True)),
                ('level', models.IntegerField(default=1)),
                ('experience_points', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to=settings.AUTH_USER_MODEL)),
                ('achievements', models.ManyToManyField(blank=True, to='core.userachievement')),
            ],
            options={
                'db_table': 'piloo_user_progress',
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('entrance', 'Entrance'), ('office', 'Office'), ('restricted', 'Restricted'), ('common', 'Common Area'), ('parking', 'Parking'), ('warehouse', 'Warehouse')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('coordinates', models.JSONField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='zones', to='core.client')),
            ],
            options={
                'db_table': 'piloo_zones',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='camera',
            name='assigned_zone',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='camera_zones', to='core.zone'),
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('camera_add', 'Camera Added'), ('camera_edit', 'Camera Modified'), ('camera_delete', 'Camera Deleted'), ('alert_acknowledge', 'Alert Acknowledged'), ('alert_resolve', 'Alert Resolved'), ('recording_view', 'Recording Viewed'), ('recording_download', 'Recording Downloaded'), ('settings_change', 'Settings Modified'), ('search_query', 'AI Search Performed'), ('employee_add', 'Employee Added'), ('zone_create', 'Zone Created'), ('subscription_change', 'Subscription Modified')], max_length=30)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'piloo_activity_logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='piloo_activ_user_id_ddca73_idx'), models.Index(fields=['action', 'timestamp'], name='piloo_activ_action_ddb519_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='clientusecase',
            index=models.Index(fields=['severity'], name='core_client_severit_8aab40_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['timestamp'], name='piloo_alert_timesta_f743e5_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['status'], name='piloo_alert_status_9601ef_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='employee',
            unique_together={('employee_id', 'date', 'owner')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read'], name='piloo_notif_user_id_74315e_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['type', 'priority'], name='piloo_notif_type_394194_idx'),
        ),
        migrations.AddIndex(
            model_name='recording',
            index=models.Index(fields=['start_time', 'end_time'], name='piloo_recor_start_t_0c0441_idx'),
        ),
        migrations.AddIndex(
            model_name='recording',
            index=models.Index(fields=['camera', 'start_time'], name='piloo_recor_camera__8a3c4d_idx'),
        ),
        migrations.AddIndex(
            model_name='recording',
            index=models.Index(fields=['has_motion'], name='piloo_recor_has_mot_ab2c17_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='zone',
            unique_together={('name', 'owner')},
        ),
        migrations.AlterUniqueTogether(
            name='camera',
            unique_together={('name', 'assigned_zone')},
        ),
    ]
